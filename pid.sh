#! /bin/bash
# Function: 根据用户输入的PID，过滤出该PID所有的信息
read -p "请输入要查询的PID: " P
n=`ps -aux| awk '$2~/^'$P'/{print $11}'|wc -l`
if [ $n -eq 0 ];then
 echo "该PID不存在!!"
 exit
fi
echo "--------------------------------"
echo "进程PID: $P"
echo "进程命令：`ps -aux| awk '$2~/^'$P'$/{print $11}'`"
echo "进程所属用户: `ps -aux| awk '$2~/^'$P'$/{print $1}'`"
echo "CPU占用率: `ps -aux| awk '$2~/^'$P'$/{print $3}'`%"
echo "内存占用率：`ps -aux| awk '$2~/^'$P'$/{print $4}'`%"
echo "进程开始运行的时刻：`ps -aux| awk '$2~/^'$P'$/{print $9}'`"
echo "进程运行的时间：`ps -aux| awk '$2~/^'$P'$/{print $10}'`"
echo "进程状态：`ps -aux| awk '$2~/^'$P'$/{print $8}'`"
echo "进程虚拟内存：`ps -aux| awk '$2~/^'$P'$/{print $5}'`"
echo "进程共享内存：`ps -aux| awk '$2~/^'$P'$/{print $6}'`"
echo "--------------------------------"





#{print $11}：这是 awk 中的一个动作语句，用于指定在匹配成功的情况下要执行的操作。{} 用于包裹动作语句。在这里，print $11 表示打印当前行的第 11 个字段的内容。换句话说，它会输出进程的命令。

#'$P'$：这部分是用户输入的 PID 变量 $P，由单引号包裹起来的。单引号用于确保在 awk 中 PID 变量 $P 被当做一个整体处理，以防止因为 PID 中包含特殊字符而导致错误的解析。最后一个 $ 不是变量的一部分，而是在单引号中作为字符串的一部分存在。

#综合起来，$2~/^'$P'$/{print $11} 表示：

#$2：当前行的第二个字段，即进程的 PID。
#~/^'$P'${print $11}：这是 awk 中的一个动作语句，用于指定在匹配成功的情况下要执行的操作。{} 用于包裹动作语句。在这里，print $11 表示打印当前行的第 11 个字段的内容。换句话说，它会输出进程的命令。

#wc -l 是一个命令，用于统计输入中的行数。在这个脚本中，它被用来计算 awk 命令的输出行数，即与用户输入的 PID 匹配的进程的数量。 -l 选项表示只统计行数，而不统计字符数或单词数。


#if [ $n -eq 0 ]; then：这是一个条件语句的开始，表示如果变量 n 的值等于 0，则执行下面的操作。在这里，[ $n -eq 0 ] 是条件判断的语法，其中 -eq 表示等于。
#echo "该PID不存在!!"：如果条件判断为真（即变量 n 的值为 0），则执行 echo 命令，输出提示信息 "该 PID 不存在!!"。echo 命令用于在终端上显示一段文。
#exit：这是一个退出命令，用于终止脚本的执行。如果 PID 不存在，那么后续的代码也就没有继续执行的必要了，因此在这里使用 exit 命令终止脚本的执行。
#fi：这是条件语句的结束标志，表示条件语句的结束。




